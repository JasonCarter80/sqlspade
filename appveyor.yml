install:
  - cinst pester

build: false

test_script:
  - ps: $spadeBase = "C:\Code\sqlSpade\"
  - ps: $sqlBase = "C:\Code\MSSQL\"
  - ps: Copy-Item "." $spadeBase -Force -Recurse
  - ps: $versions = @(
      "SQL2005\X86","SQL2005\X64","SQL2005\SP","SQL2005\SP\SP1","SQL2005\SP\SP2","SQL2005\SP\SP3","SQL2005\SP\SP4","SQL2008\Enterprise",
      "SQL2008\Standard","SQL2008\Developer","SQL2008\SP","SQL2008\SP\SP1","SQL2008\SP\SP2","SQL2008\SP\SP3","SQL2008\SP\SP4","SQL2008R2\Enterprise",
      "SQL2008R2\Standard","SQL2008R2\Developer","SQL2008R2\SP","SQL2008R2\SP\SP1","SQL2008R2\SP\SP2","SQL2008R2\SP\SP3",
      "SQL2012\Enterprise","SQL2012\Standard","SQL2012\Developer","SQL2012\SP","SQL2012\SP\SP1","SQL2012\SP\SP2","SQL2012\SP\SP3",
      "SQL2014\Enterprise","SQL2014\Standard","SQL2014\Developer","SQL2014\SP","SQL2014\SP\SP1","SQL2014\SP\SP2",
      "SQL2016\Enterprise","SQL2016\Standard","SQL2016\Developer","SQL2016\SP"
      )
  - ps: $versions | % { if (!(Test-Path -Path (Join-Path $sqlBase $_))) { $a = New-Item -Type Directory -Path (Join-Path $sqlBase $_)}}  
  - ps: gci "C:\code\" -Recurse | ?{ $_.PSIsContainer }| % { Write-Output $_.FullName }
  - ps: $res = Invoke-Pester -Path (Join-Path $spadeBase "Tests") -OutputFormat NUnitXml -OutputFile (Join-Path $spadeBase TestsResults.xml) -PassThru
  - ps: (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path (Join-Path $spadeBase TestsResults.xml)))
  - ps: if ($res.FailedCount -gt 0) { throw "$($res.FailedCount) tests failed."}

artifacts:
  - path: 'C:\Code\Spade\Logs\*.*'
    name: Logs